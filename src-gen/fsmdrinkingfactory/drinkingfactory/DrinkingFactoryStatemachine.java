/** Generated by YAKINDU Statechart Tools code generator. */
package fsmdrinkingfactory.drinkingfactory;

import fsmdrinkingfactory.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkingFactoryStatemachine implements IDrinkingFactoryStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean welcome;
		
		
		public void raiseWelcome() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							welcome = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean selectHotDrink;
		
		
		public void raiseSelectHotDrink() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							selectHotDrink = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean selectParam;
		
		
		public void raiseSelectParam() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							selectParam = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean payCB;
		
		
		public void raisePayCB() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							payCB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCash;
		
		
		public void raiseAddCash() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCash = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean validate;
		
		
		public void raiseValidate() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							validate = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean startPrep;
		
		
		public void raiseStartPrep() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							startPrep = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean startServ;
		
		
		public void raiseStartServ() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							startServ = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean deliver;
		
		
		public void raiseDeliver() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							deliver = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean action;
		
		
		public void raiseAction() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							action = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean finishWash;
		
		
		public void raiseFinishWash() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							finishWash = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean prepSupp;
		
		
		public void raisePrepSupp() {
			synchronized(DrinkingFactoryStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							prepSupp = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doCancel;
		
		
		public boolean isRaisedDoCancel() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doCancel;
			}
		}
		
		protected void raiseDoCancel() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doCancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCancelRaised();
				}
			}
		}
		
		private boolean doWelcome;
		
		
		public boolean isRaisedDoWelcome() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doWelcome;
			}
		}
		
		protected void raiseDoWelcome() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doWelcome = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWelcomeRaised();
				}
			}
		}
		
		private boolean doHotDrink;
		
		
		public boolean isRaisedDoHotDrink() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doHotDrink;
			}
		}
		
		protected void raiseDoHotDrink() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doHotDrink = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoHotDrinkRaised();
				}
			}
		}
		
		private boolean doCB;
		
		
		public boolean isRaisedDoCB() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doCB;
			}
		}
		
		protected void raiseDoCB() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doCB = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCBRaised();
				}
			}
		}
		
		private boolean doAddCash;
		
		
		public boolean isRaisedDoAddCash() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doAddCash;
			}
		}
		
		protected void raiseDoAddCash() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doAddCash = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoAddCashRaised();
				}
			}
		}
		
		private boolean doStartMachine;
		
		
		public boolean isRaisedDoStartMachine() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doStartMachine;
			}
		}
		
		protected void raiseDoStartMachine() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doStartMachine = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoStartMachineRaised();
				}
			}
		}
		
		private boolean doPrep;
		
		
		public boolean isRaisedDoPrep() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doPrep;
			}
		}
		
		protected void raiseDoPrep() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doPrep = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrepRaised();
				}
			}
		}
		
		private boolean doPouring;
		
		
		public boolean isRaisedDoPouring() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doPouring;
			}
		}
		
		protected void raiseDoPouring() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doPouring = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPouringRaised();
				}
			}
		}
		
		private boolean doWaitRecup;
		
		
		public boolean isRaisedDoWaitRecup() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doWaitRecup;
			}
		}
		
		protected void raiseDoWaitRecup() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doWaitRecup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaitRecupRaised();
				}
			}
		}
		
		private boolean doWash;
		
		
		public boolean isRaisedDoWash() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doWash;
			}
		}
		
		protected void raiseDoWash() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doWash = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWashRaised();
				}
			}
		}
		
		private boolean doPrepSupp;
		
		
		public boolean isRaisedDoPrepSupp() {
			synchronized(DrinkingFactoryStatemachine.this) {
				return doPrepSupp;
			}
		}
		
		protected void raiseDoPrepSupp() {
			synchronized(DrinkingFactoryStatemachine.this) {
				doPrepSupp = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrepSuppRaised();
				}
			}
		}
		
		protected void clearEvents() {
			welcome = false;
			cancel = false;
			selectHotDrink = false;
			selectParam = false;
			payCB = false;
			addCash = false;
			validate = false;
			startPrep = false;
			startServ = false;
			deliver = false;
			action = false;
			finishWash = false;
			prepSupp = false;
		}
		protected void clearOutEvents() {
		
		doCancel = false;
		doWelcome = false;
		doHotDrink = false;
		doCB = false;
		doAddCash = false;
		doStartMachine = false;
		doPrep = false;
		doPouring = false;
		doWaitRecup = false;
		doWash = false;
		doPrepSupp = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Interface,
		main_region_Interface_Selection_Init,
		main_region_Interface_Selection_HotDrink,
		main_region_Interface_Payment_Init,
		main_region_Interface_Payment_CB,
		main_region_Interface_Payment_Cash,
		main_region_Interface_Timer_Wait,
		main_region_Init,
		main_region_Starting,
		main_region_Starting_r1_Take_ingr,
		main_region_Starting_r2_Start_heated,
		main_region_Preparation,
		main_region_Preparation_r1_Prep_pouring,
		main_region_Preparation_r2_Wait_heated,
		main_region_Pouring,
		main_region_Pouring_r1_Sugar,
		main_region_Pouring_r2_Pouring,
		main_region_Wait_recup,
		main_region_Prep_supp,
		main_region_Washing,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[4];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DrinkingFactoryStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Interface_Selection_Init:
				main_region_Interface_Selection_Init_react(true);
				break;
			case main_region_Interface_Selection_HotDrink:
				main_region_Interface_Selection_HotDrink_react(true);
				break;
			case main_region_Interface_Payment_Init:
				main_region_Interface_Payment_Init_react(true);
				break;
			case main_region_Interface_Payment_CB:
				main_region_Interface_Payment_CB_react(true);
				break;
			case main_region_Interface_Payment_Cash:
				main_region_Interface_Payment_Cash_react(true);
				break;
			case main_region_Interface_Timer_Wait:
				main_region_Interface_Timer_Wait_react(true);
				break;
			case main_region_Init:
				main_region_Init_react(true);
				break;
			case main_region_Starting_r1_Take_ingr:
				main_region_Starting_r1_Take_ingr_react(true);
				break;
			case main_region_Starting_r2_Start_heated:
				main_region_Starting_r2_Start_heated_react(true);
				break;
			case main_region_Preparation_r1_Prep_pouring:
				main_region_Preparation_r1_Prep_pouring_react(true);
				break;
			case main_region_Preparation_r2_Wait_heated:
				main_region_Preparation_r2_Wait_heated_react(true);
				break;
			case main_region_Pouring_r1_Sugar:
				main_region_Pouring_r1_Sugar_react(true);
				break;
			case main_region_Pouring_r2_Pouring:
				main_region_Pouring_r2_Pouring_react(true);
				break;
			case main_region_Wait_recup:
				main_region_Wait_recup_react(true);
				break;
			case main_region_Prep_supp:
				main_region_Prep_supp_react(true);
				break;
			case main_region_Washing:
				main_region_Washing_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Interface:
			return stateVector[0].ordinal() >= State.
					main_region_Interface.ordinal()&& stateVector[0].ordinal() <= State.main_region_Interface_Timer_Wait.ordinal();
		case main_region_Interface_Selection_Init:
			return stateVector[0] == State.main_region_Interface_Selection_Init;
		case main_region_Interface_Selection_HotDrink:
			return stateVector[0] == State.main_region_Interface_Selection_HotDrink;
		case main_region_Interface_Payment_Init:
			return stateVector[1] == State.main_region_Interface_Payment_Init;
		case main_region_Interface_Payment_CB:
			return stateVector[1] == State.main_region_Interface_Payment_CB;
		case main_region_Interface_Payment_Cash:
			return stateVector[1] == State.main_region_Interface_Payment_Cash;
		case main_region_Interface_Timer_Wait:
			return stateVector[2] == State.main_region_Interface_Timer_Wait;
		case main_region_Init:
			return stateVector[0] == State.main_region_Init;
		case main_region_Starting:
			return stateVector[0].ordinal() >= State.
					main_region_Starting.ordinal()&& stateVector[0].ordinal() <= State.main_region_Starting_r2_Start_heated.ordinal();
		case main_region_Starting_r1_Take_ingr:
			return stateVector[0] == State.main_region_Starting_r1_Take_ingr;
		case main_region_Starting_r2_Start_heated:
			return stateVector[1] == State.main_region_Starting_r2_Start_heated;
		case main_region_Preparation:
			return stateVector[0].ordinal() >= State.
					main_region_Preparation.ordinal()&& stateVector[0].ordinal() <= State.main_region_Preparation_r2_Wait_heated.ordinal();
		case main_region_Preparation_r1_Prep_pouring:
			return stateVector[0] == State.main_region_Preparation_r1_Prep_pouring;
		case main_region_Preparation_r2_Wait_heated:
			return stateVector[1] == State.main_region_Preparation_r2_Wait_heated;
		case main_region_Pouring:
			return stateVector[0].ordinal() >= State.
					main_region_Pouring.ordinal()&& stateVector[0].ordinal() <= State.main_region_Pouring_r2_Pouring.ordinal();
		case main_region_Pouring_r1_Sugar:
			return stateVector[0] == State.main_region_Pouring_r1_Sugar;
		case main_region_Pouring_r2_Pouring:
			return stateVector[1] == State.main_region_Pouring_r2_Pouring;
		case main_region_Wait_recup:
			return stateVector[0] == State.main_region_Wait_recup;
		case main_region_Prep_supp:
			return stateVector[0] == State.main_region_Prep_supp;
		case main_region_Washing:
			return stateVector[0] == State.main_region_Washing;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseWelcome() {
		sCInterface.raiseWelcome();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseSelectHotDrink() {
		sCInterface.raiseSelectHotDrink();
	}
	
	public synchronized void raiseSelectParam() {
		sCInterface.raiseSelectParam();
	}
	
	public synchronized void raisePayCB() {
		sCInterface.raisePayCB();
	}
	
	public synchronized void raiseAddCash() {
		sCInterface.raiseAddCash();
	}
	
	public synchronized void raiseValidate() {
		sCInterface.raiseValidate();
	}
	
	public synchronized void raiseStartPrep() {
		sCInterface.raiseStartPrep();
	}
	
	public synchronized void raiseStartServ() {
		sCInterface.raiseStartServ();
	}
	
	public synchronized void raiseDeliver() {
		sCInterface.raiseDeliver();
	}
	
	public synchronized void raiseAction() {
		sCInterface.raiseAction();
	}
	
	public synchronized void raiseFinishWash() {
		sCInterface.raiseFinishWash();
	}
	
	public synchronized void raisePrepSupp() {
		sCInterface.raisePrepSupp();
	}
	
	public synchronized boolean isRaisedDoCancel() {
		return sCInterface.isRaisedDoCancel();
	}
	
	public synchronized boolean isRaisedDoWelcome() {
		return sCInterface.isRaisedDoWelcome();
	}
	
	public synchronized boolean isRaisedDoHotDrink() {
		return sCInterface.isRaisedDoHotDrink();
	}
	
	public synchronized boolean isRaisedDoCB() {
		return sCInterface.isRaisedDoCB();
	}
	
	public synchronized boolean isRaisedDoAddCash() {
		return sCInterface.isRaisedDoAddCash();
	}
	
	public synchronized boolean isRaisedDoStartMachine() {
		return sCInterface.isRaisedDoStartMachine();
	}
	
	public synchronized boolean isRaisedDoPrep() {
		return sCInterface.isRaisedDoPrep();
	}
	
	public synchronized boolean isRaisedDoPouring() {
		return sCInterface.isRaisedDoPouring();
	}
	
	public synchronized boolean isRaisedDoWaitRecup() {
		return sCInterface.isRaisedDoWaitRecup();
	}
	
	public synchronized boolean isRaisedDoWash() {
		return sCInterface.isRaisedDoWash();
	}
	
	public synchronized boolean isRaisedDoPrepSupp() {
		return sCInterface.isRaisedDoPrepSupp();
	}
	
	/* Entry action for state 'HotDrink'. */
	private void entryAction_main_region_Interface_Selection_HotDrink() {
		sCInterface.raiseAction();
	}
	
	/* Entry action for state 'CB'. */
	private void entryAction_main_region_Interface_Payment_CB() {
		sCInterface.raiseAction();
	}
	
	/* Entry action for state 'Cash'. */
	private void entryAction_main_region_Interface_Payment_Cash() {
		sCInterface.raiseAction();
	}
	
	/* Entry action for state 'Wait'. */
	private void entryAction_main_region_Interface_Timer_Wait() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		timer.setTimer(this, 1, (1 * 1000), false);
	}
	
	/* Entry action for state 'Wait recup'. */
	private void entryAction_main_region_Wait_recup() {
		timer.setTimer(this, 2, (15 * 1000), false);
	}
	
	/* Entry action for state 'Prep supp'. */
	private void entryAction_main_region_Prep_supp() {
		timer.setTimer(this, 3, (30 * 1000), false);
	}
	
	/* Exit action for state 'Wait'. */
	private void exitAction_main_region_Interface_Timer_Wait() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Wait recup'. */
	private void exitAction_main_region_Wait_recup() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Prep supp'. */
	private void exitAction_main_region_Prep_supp() {
		timer.unsetTimer(this, 3);
	}
	
	/* 'default' enter sequence for state Interface */
	private void enterSequence_main_region_Interface_default() {
		enterSequence_main_region_Interface_Selection_default();
		enterSequence_main_region_Interface_Payment_default();
		enterSequence_main_region_Interface_Timer_default();
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Interface_Selection_Init_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Interface_Selection_Init;
	}
	
	/* 'default' enter sequence for state HotDrink */
	private void enterSequence_main_region_Interface_Selection_HotDrink_default() {
		entryAction_main_region_Interface_Selection_HotDrink();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Interface_Selection_HotDrink;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Interface_Payment_Init_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Interface_Payment_Init;
	}
	
	/* 'default' enter sequence for state CB */
	private void enterSequence_main_region_Interface_Payment_CB_default() {
		entryAction_main_region_Interface_Payment_CB();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Interface_Payment_CB;
	}
	
	/* 'default' enter sequence for state Cash */
	private void enterSequence_main_region_Interface_Payment_Cash_default() {
		entryAction_main_region_Interface_Payment_Cash();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Interface_Payment_Cash;
	}
	
	/* 'default' enter sequence for state Wait */
	private void enterSequence_main_region_Interface_Timer_Wait_default() {
		entryAction_main_region_Interface_Timer_Wait();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Interface_Timer_Wait;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		entryAction_main_region_Init();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Init;
	}
	
	/* 'default' enter sequence for state Starting */
	private void enterSequence_main_region_Starting_default() {
		enterSequence_main_region_Starting_r1_default();
		enterSequence_main_region_Starting_r2_default();
	}
	
	/* 'default' enter sequence for state Take ingr */
	private void enterSequence_main_region_Starting_r1_Take_ingr_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Starting_r1_Take_ingr;
	}
	
	/* 'default' enter sequence for state Start heated */
	private void enterSequence_main_region_Starting_r2_Start_heated_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Starting_r2_Start_heated;
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_main_region_Preparation_default() {
		enterSequence_main_region_Preparation_r1_default();
		enterSequence_main_region_Preparation_r2_default();
	}
	
	/* 'default' enter sequence for state Prep pouring */
	private void enterSequence_main_region_Preparation_r1_Prep_pouring_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Preparation_r1_Prep_pouring;
	}
	
	/* 'default' enter sequence for state Wait heated */
	private void enterSequence_main_region_Preparation_r2_Wait_heated_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Preparation_r2_Wait_heated;
	}
	
	/* 'default' enter sequence for state Pouring */
	private void enterSequence_main_region_Pouring_default() {
		enterSequence_main_region_Pouring_r1_default();
		enterSequence_main_region_Pouring_r2_default();
	}
	
	/* 'default' enter sequence for state Sugar */
	private void enterSequence_main_region_Pouring_r1_Sugar_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Pouring_r1_Sugar;
	}
	
	/* 'default' enter sequence for state Pouring */
	private void enterSequence_main_region_Pouring_r2_Pouring_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Pouring_r2_Pouring;
	}
	
	/* 'default' enter sequence for state Wait recup */
	private void enterSequence_main_region_Wait_recup_default() {
		entryAction_main_region_Wait_recup();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Wait_recup;
	}
	
	/* 'default' enter sequence for state Prep supp */
	private void enterSequence_main_region_Prep_supp_default() {
		entryAction_main_region_Prep_supp();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Prep_supp;
	}
	
	/* 'default' enter sequence for state Washing */
	private void enterSequence_main_region_Washing_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Washing;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Selection */
	private void enterSequence_main_region_Interface_Selection_default() {
		react_main_region_Interface_Selection__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_main_region_Interface_Payment_default() {
		react_main_region_Interface_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region Timer */
	private void enterSequence_main_region_Interface_Timer_default() {
		react_main_region_Interface_Timer__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Starting_r1_default() {
		react_main_region_Starting_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Starting_r2_default() {
		react_main_region_Starting_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Preparation_r1_default() {
		react_main_region_Preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Preparation_r2_default() {
		react_main_region_Preparation_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Pouring_r1_default() {
		react_main_region_Pouring_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Pouring_r2_default() {
		react_main_region_Pouring_r2__entry_Default();
	}
	
	/* Default exit sequence for state Interface */
	private void exitSequence_main_region_Interface() {
		exitSequence_main_region_Interface_Selection();
		exitSequence_main_region_Interface_Payment();
		exitSequence_main_region_Interface_Timer();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Interface_Selection_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state HotDrink */
	private void exitSequence_main_region_Interface_Selection_HotDrink() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Interface_Payment_Init() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state CB */
	private void exitSequence_main_region_Interface_Payment_CB() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Cash */
	private void exitSequence_main_region_Interface_Payment_Cash() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Wait */
	private void exitSequence_main_region_Interface_Timer_Wait() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_Interface_Timer_Wait();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state Starting */
	private void exitSequence_main_region_Starting() {
		exitSequence_main_region_Starting_r1();
		exitSequence_main_region_Starting_r2();
	}
	
	/* Default exit sequence for state Take ingr */
	private void exitSequence_main_region_Starting_r1_Take_ingr() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Start heated */
	private void exitSequence_main_region_Starting_r2_Start_heated() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_main_region_Preparation() {
		exitSequence_main_region_Preparation_r1();
		exitSequence_main_region_Preparation_r2();
	}
	
	/* Default exit sequence for state Prep pouring */
	private void exitSequence_main_region_Preparation_r1_Prep_pouring() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Wait heated */
	private void exitSequence_main_region_Preparation_r2_Wait_heated() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Pouring */
	private void exitSequence_main_region_Pouring() {
		exitSequence_main_region_Pouring_r1();
		exitSequence_main_region_Pouring_r2();
	}
	
	/* Default exit sequence for state Sugar */
	private void exitSequence_main_region_Pouring_r1_Sugar() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Pouring */
	private void exitSequence_main_region_Pouring_r2_Pouring() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Wait recup */
	private void exitSequence_main_region_Wait_recup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Wait_recup();
	}
	
	/* Default exit sequence for state Prep supp */
	private void exitSequence_main_region_Prep_supp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Prep_supp();
	}
	
	/* Default exit sequence for state Washing */
	private void exitSequence_main_region_Washing() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Interface_Selection_Init:
			exitSequence_main_region_Interface_Selection_Init();
			break;
		case main_region_Interface_Selection_HotDrink:
			exitSequence_main_region_Interface_Selection_HotDrink();
			break;
		case main_region_Init:
			exitSequence_main_region_Init();
			break;
		case main_region_Starting_r1_Take_ingr:
			exitSequence_main_region_Starting_r1_Take_ingr();
			break;
		case main_region_Preparation_r1_Prep_pouring:
			exitSequence_main_region_Preparation_r1_Prep_pouring();
			break;
		case main_region_Pouring_r1_Sugar:
			exitSequence_main_region_Pouring_r1_Sugar();
			break;
		case main_region_Wait_recup:
			exitSequence_main_region_Wait_recup();
			break;
		case main_region_Prep_supp:
			exitSequence_main_region_Prep_supp();
			break;
		case main_region_Washing:
			exitSequence_main_region_Washing();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Interface_Payment_Init:
			exitSequence_main_region_Interface_Payment_Init();
			break;
		case main_region_Interface_Payment_CB:
			exitSequence_main_region_Interface_Payment_CB();
			break;
		case main_region_Interface_Payment_Cash:
			exitSequence_main_region_Interface_Payment_Cash();
			break;
		case main_region_Starting_r2_Start_heated:
			exitSequence_main_region_Starting_r2_Start_heated();
			break;
		case main_region_Preparation_r2_Wait_heated:
			exitSequence_main_region_Preparation_r2_Wait_heated();
			break;
		case main_region_Pouring_r2_Pouring:
			exitSequence_main_region_Pouring_r2_Pouring();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Interface_Timer_Wait:
			exitSequence_main_region_Interface_Timer_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Selection */
	private void exitSequence_main_region_Interface_Selection() {
		switch (stateVector[0]) {
		case main_region_Interface_Selection_Init:
			exitSequence_main_region_Interface_Selection_Init();
			break;
		case main_region_Interface_Selection_HotDrink:
			exitSequence_main_region_Interface_Selection_HotDrink();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_main_region_Interface_Payment() {
		switch (stateVector[1]) {
		case main_region_Interface_Payment_Init:
			exitSequence_main_region_Interface_Payment_Init();
			break;
		case main_region_Interface_Payment_CB:
			exitSequence_main_region_Interface_Payment_CB();
			break;
		case main_region_Interface_Payment_Cash:
			exitSequence_main_region_Interface_Payment_Cash();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Timer */
	private void exitSequence_main_region_Interface_Timer() {
		switch (stateVector[2]) {
		case main_region_Interface_Timer_Wait:
			exitSequence_main_region_Interface_Timer_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Starting_r1() {
		switch (stateVector[0]) {
		case main_region_Starting_r1_Take_ingr:
			exitSequence_main_region_Starting_r1_Take_ingr();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Starting_r2() {
		switch (stateVector[1]) {
		case main_region_Starting_r2_Start_heated:
			exitSequence_main_region_Starting_r2_Start_heated();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Preparation_r1() {
		switch (stateVector[0]) {
		case main_region_Preparation_r1_Prep_pouring:
			exitSequence_main_region_Preparation_r1_Prep_pouring();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Preparation_r2() {
		switch (stateVector[1]) {
		case main_region_Preparation_r2_Wait_heated:
			exitSequence_main_region_Preparation_r2_Wait_heated();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Pouring_r1() {
		switch (stateVector[0]) {
		case main_region_Pouring_r1_Sugar:
			exitSequence_main_region_Pouring_r1_Sugar();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Pouring_r2() {
		switch (stateVector[1]) {
		case main_region_Pouring_r2_Pouring:
			exitSequence_main_region_Pouring_r2_Pouring();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Interface_Selection__entry_Default() {
		enterSequence_main_region_Interface_Selection_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Interface_Payment__entry_Default() {
		enterSequence_main_region_Interface_Payment_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Interface_Timer__entry_Default() {
		enterSequence_main_region_Interface_Timer_Wait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Starting_r1__entry_Default() {
		enterSequence_main_region_Starting_r1_Take_ingr_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Starting_r2__entry_Default() {
		enterSequence_main_region_Starting_r2_Start_heated_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1__entry_Default() {
		enterSequence_main_region_Preparation_r1_Prep_pouring_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r2__entry_Default() {
		enterSequence_main_region_Preparation_r2_Wait_heated_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Pouring_r1__entry_Default() {
		enterSequence_main_region_Pouring_r1_Sugar_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Pouring_r2__entry_Default() {
		enterSequence_main_region_Pouring_r2_Pouring_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Interface_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancel) {
				exitSequence_main_region_Interface();
				sCInterface.raiseDoCancel();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				if (sCInterface.validate) {
					exitSequence_main_region_Interface();
					sCInterface.raiseDoStartMachine();
					
					enterSequence_main_region_Starting_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Selection_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selectHotDrink) {
				exitSequence_main_region_Interface_Selection_Init();
				sCInterface.raiseDoHotDrink();
				
				enterSequence_main_region_Interface_Selection_HotDrink_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Selection_HotDrink_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.selectParam) {
				exitSequence_main_region_Interface_Selection_HotDrink();
				enterSequence_main_region_Interface_Selection_HotDrink_default();
			} else {
				if (sCInterface.selectHotDrink) {
					exitSequence_main_region_Interface_Selection_HotDrink();
					sCInterface.raiseDoHotDrink();
					
					enterSequence_main_region_Interface_Selection_HotDrink_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Payment_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.payCB) {
				exitSequence_main_region_Interface_Payment_Init();
				sCInterface.raiseDoCB();
				
				enterSequence_main_region_Interface_Payment_CB_default();
			} else {
				if (sCInterface.addCash) {
					exitSequence_main_region_Interface_Payment_Init();
					sCInterface.raiseDoAddCash();
					
					enterSequence_main_region_Interface_Payment_Cash_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Payment_CB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Payment_Cash_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addCash) {
				exitSequence_main_region_Interface_Payment_Cash();
				sCInterface.raiseDoAddCash();
				
				enterSequence_main_region_Interface_Payment_Cash_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Timer_Wait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Interface();
				sCInterface.raiseDoCancel();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				if (sCInterface.action) {
					exitSequence_main_region_Interface_Timer_Wait();
					enterSequence_main_region_Interface_Timer_Wait_default();
					main_region_Interface_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Interface_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_Init();
				sCInterface.raiseDoWelcome();
				
				enterSequence_main_region_Interface_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Starting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.startPrep) {
				exitSequence_main_region_Starting();
				sCInterface.raiseDoPrep();
				
				enterSequence_main_region_Preparation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Starting_r1_Take_ingr_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Starting_r2_Start_heated_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Starting_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.startServ) {
				exitSequence_main_region_Preparation();
				sCInterface.raiseDoPouring();
				
				enterSequence_main_region_Pouring_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Prep_pouring_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r2_Wait_heated_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Pouring_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.deliver) {
				exitSequence_main_region_Pouring();
				sCInterface.raiseDoWaitRecup();
				
				enterSequence_main_region_Wait_recup_default();
				react();
			} else {
				if (sCInterface.prepSupp) {
					exitSequence_main_region_Pouring();
					sCInterface.raiseDoPrepSupp();
					
					enterSequence_main_region_Prep_supp_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Pouring_r1_Sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Pouring_r2_Pouring_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Pouring_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Wait_recup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_Wait_recup();
				sCInterface.raiseDoWash();
				
				enterSequence_main_region_Washing_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Prep_supp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_Prep_supp();
				sCInterface.raiseDoWaitRecup();
				
				enterSequence_main_region_Wait_recup_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Washing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.finishWash) {
				exitSequence_main_region_Washing();
				sCInterface.raiseDoCancel();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
