/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drinkingMachine;

import fr.univcotedazur.polytech.si4.fsm.project.IStatemachine;
import fr.univcotedazur.polytech.si4.fsm.project.ITimed;
import fr.univcotedazur.polytech.si4.fsm.project.ITimerService;
import fr.univcotedazur.polytech.si4.fsm.project.rx.Observable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkingFactoryStatemachine implements IStatemachine, ITimed {
	public enum State {
		MAIN_REGION_INTERFACE,
		MAIN_REGION_INTERFACE_SELECTION_INIT,
		MAIN_REGION_INTERFACE_SELECTION_HOTDRINK,
		MAIN_REGION_INTERFACE_PAYMENT_INIT,
		MAIN_REGION_INTERFACE_PAYMENT_CB,
		MAIN_REGION_INTERFACE_PAYMENT_CASH,
		MAIN_REGION_INTERFACE_TIMER_WAIT,
		MAIN_REGION_INIT,
		MAIN_REGION_WAIT_RECUP,
		MAIN_REGION_WASHING,
		MAIN_REGION_PREPARATION,
		MAIN_REGION_PREPARATION_R1_PREPARATION,
		MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING,
		MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED,
		MAIN_REGION_PREPARATION_R1_PREP_SUPP,
		MAIN_REGION_PREPARATION_R1_POURING,
		MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR,
		MAIN_REGION_PREPARATION_R1_POURING_R2_POURING,
		MAIN_REGION_PREPARATION_R1_STARTING,
		MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR,
		MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimerService timerService;
	
	private final boolean[] timeEvents = new boolean[9];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.isExecuting = value;
		}
	}
	public DrinkingFactoryStatemachine() {
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		setTime1(0);
		
		setTime2(0);
		
		setTime3(0);
		
		setTime4(0);
		
		setTime5(0);
		
		setTotalTime(0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$||stateVector[2] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		welcome = false;
		cancel = false;
		selectHotDrink = false;
		selectParam = false;
		payCB = false;
		addCash = false;
		validate = false;
		action = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
		timeEvents[7] = false;
		timeEvents[8] = false;
	}
	
	private void runCycle() {
		if (timerService == null) {
			throw new IllegalStateException("Timer service must be set.");
		}
		
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_REGION_INTERFACE_SELECTION_INIT:
					main_region_Interface_Selection_Init_react(true);
					break;
				case MAIN_REGION_INTERFACE_SELECTION_HOTDRINK:
					main_region_Interface_Selection_HotDrink_react(true);
					break;
				case MAIN_REGION_INTERFACE_PAYMENT_INIT:
					main_region_Interface_Payment_Init_react(true);
					break;
				case MAIN_REGION_INTERFACE_PAYMENT_CB:
					main_region_Interface_Payment_CB_react(true);
					break;
				case MAIN_REGION_INTERFACE_PAYMENT_CASH:
					main_region_Interface_Payment_Cash_react(true);
					break;
				case MAIN_REGION_INTERFACE_TIMER_WAIT:
					main_region_Interface_Timer_Wait_react(true);
					break;
				case MAIN_REGION_INIT:
					main_region_Init_react(true);
					break;
				case MAIN_REGION_WAIT_RECUP:
					main_region_Wait_recup_react(true);
					break;
				case MAIN_REGION_WASHING:
					main_region_Washing_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING:
					main_region_Preparation_r1_Preparation_r1_Prep_pouring_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED:
					main_region_Preparation_r1_Preparation_r2_Wait_heated_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_PREP_SUPP:
					main_region_Preparation_r1_Prep_supp_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR:
					main_region_Preparation_r1_Pouring_r1_Sugar_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_POURING_R2_POURING:
					main_region_Preparation_r1_Pouring_r2_Pouring_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR:
					main_region_Preparation_r1_Starting_r1_Take_ingr_react(true);
					break;
				case MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED:
					main_region_Preparation_r1_Starting_r2_Start_heated_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			nextEvent();
		} while (((((((((((((((((welcome || cancel) || selectHotDrink) || selectParam) || payCB) || addCash) || validate) || action) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]) || timeEvents[7]) || timeEvents[8]));
		
		isExecuting = false;
	}
	
	protected void nextEvent() {
		if(!inEventQueue.isEmpty()) {
			inEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_INTERFACE:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_INTERFACE.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_INTERFACE_TIMER_WAIT.ordinal();
		case MAIN_REGION_INTERFACE_SELECTION_INIT:
			return stateVector[0] == State.MAIN_REGION_INTERFACE_SELECTION_INIT;
		case MAIN_REGION_INTERFACE_SELECTION_HOTDRINK:
			return stateVector[0] == State.MAIN_REGION_INTERFACE_SELECTION_HOTDRINK;
		case MAIN_REGION_INTERFACE_PAYMENT_INIT:
			return stateVector[1] == State.MAIN_REGION_INTERFACE_PAYMENT_INIT;
		case MAIN_REGION_INTERFACE_PAYMENT_CB:
			return stateVector[1] == State.MAIN_REGION_INTERFACE_PAYMENT_CB;
		case MAIN_REGION_INTERFACE_PAYMENT_CASH:
			return stateVector[1] == State.MAIN_REGION_INTERFACE_PAYMENT_CASH;
		case MAIN_REGION_INTERFACE_TIMER_WAIT:
			return stateVector[2] == State.MAIN_REGION_INTERFACE_TIMER_WAIT;
		case MAIN_REGION_INIT:
			return stateVector[0] == State.MAIN_REGION_INIT;
		case MAIN_REGION_WAIT_RECUP:
			return stateVector[0] == State.MAIN_REGION_WAIT_RECUP;
		case MAIN_REGION_WASHING:
			return stateVector[0] == State.MAIN_REGION_WASHING;
		case MAIN_REGION_PREPARATION:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_PREPARATION.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED.ordinal();
		case MAIN_REGION_PREPARATION_R1_PREPARATION:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_PREPARATION_R1_PREPARATION.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED.ordinal();
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING:
			return stateVector[0] == State.MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING;
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED:
			return stateVector[1] == State.MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED;
		case MAIN_REGION_PREPARATION_R1_PREP_SUPP:
			return stateVector[0] == State.MAIN_REGION_PREPARATION_R1_PREP_SUPP;
		case MAIN_REGION_PREPARATION_R1_POURING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_PREPARATION_R1_POURING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_PREPARATION_R1_POURING_R2_POURING.ordinal();
		case MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR:
			return stateVector[0] == State.MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR;
		case MAIN_REGION_PREPARATION_R1_POURING_R2_POURING:
			return stateVector[1] == State.MAIN_REGION_PREPARATION_R1_POURING_R2_POURING;
		case MAIN_REGION_PREPARATION_R1_STARTING:
			return stateVector[0].ordinal() >= State.
					MAIN_REGION_PREPARATION_R1_STARTING.ordinal()&& stateVector[0].ordinal() <= State.MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED.ordinal();
		case MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR:
			return stateVector[0] == State.MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR;
		case MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED:
			return stateVector[1] == State.MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED;
		default:
			return false;
		}
	}
	
	public synchronized void setTimerService(ITimerService timerService) {
		this.timerService = timerService;
	}
	
	public ITimerService getTimerService() {
		return timerService;
	}
	
	public synchronized void raiseTimeEvent(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
			}
		});
		runCycle();
	}
	
	private boolean welcome;
	
	
	public void raiseWelcome() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					welcome = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean cancel;
	
	
	public void raiseCancel() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					cancel = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean selectHotDrink;
	
	
	public void raiseSelectHotDrink() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					selectHotDrink = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean selectParam;
	
	
	public void raiseSelectParam() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					selectParam = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean payCB;
	
	
	public void raisePayCB() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					payCB = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean addCash;
	
	
	public void raiseAddCash() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					addCash = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean validate;
	
	
	public void raiseValidate() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					validate = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean action;
	
	
	public void raiseAction() {
		synchronized(DrinkingFactoryStatemachine.this) {
			inEventQueue.add(new Runnable() {
				@Override
				public void run() {
					action = true;
				}
			});
			runCycle();
		}
	}
	
	private boolean doCancel;
	
	
	protected void raiseDoCancel() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doCancel = true;
			doCancelObservable.next(null);
		}
	}
	
	private Observable<Void> doCancelObservable = new Observable<Void>();
	
	public Observable<Void> getDoCancel() {
		return doCancelObservable;
	}
	
	private boolean doWelcome;
	
	
	protected void raiseDoWelcome() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doWelcome = true;
			doWelcomeObservable.next(null);
		}
	}
	
	private Observable<Void> doWelcomeObservable = new Observable<Void>();
	
	public Observable<Void> getDoWelcome() {
		return doWelcomeObservable;
	}
	
	private boolean doCB;
	
	
	protected void raiseDoCB() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doCB = true;
			doCBObservable.next(null);
		}
	}
	
	private Observable<Void> doCBObservable = new Observable<Void>();
	
	public Observable<Void> getDoCB() {
		return doCBObservable;
	}
	
	private boolean doAddCash;
	
	
	protected void raiseDoAddCash() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doAddCash = true;
			doAddCashObservable.next(null);
		}
	}
	
	private Observable<Void> doAddCashObservable = new Observable<Void>();
	
	public Observable<Void> getDoAddCash() {
		return doAddCashObservable;
	}
	
	private boolean doHotDrink;
	
	
	protected void raiseDoHotDrink() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doHotDrink = true;
			doHotDrinkObservable.next(null);
		}
	}
	
	private Observable<Void> doHotDrinkObservable = new Observable<Void>();
	
	public Observable<Void> getDoHotDrink() {
		return doHotDrinkObservable;
	}
	
	private boolean doStartMachine;
	
	
	protected void raiseDoStartMachine() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doStartMachine = true;
			doStartMachineObservable.next(null);
		}
	}
	
	private Observable<Void> doStartMachineObservable = new Observable<Void>();
	
	public Observable<Void> getDoStartMachine() {
		return doStartMachineObservable;
	}
	
	private boolean doPrep;
	
	
	protected void raiseDoPrep() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doPrep = true;
			doPrepObservable.next(null);
		}
	}
	
	private Observable<Void> doPrepObservable = new Observable<Void>();
	
	public Observable<Void> getDoPrep() {
		return doPrepObservable;
	}
	
	private boolean doPouring;
	
	
	protected void raiseDoPouring() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doPouring = true;
			doPouringObservable.next(null);
		}
	}
	
	private Observable<Void> doPouringObservable = new Observable<Void>();
	
	public Observable<Void> getDoPouring() {
		return doPouringObservable;
	}
	
	private boolean doWaitRecup;
	
	
	protected void raiseDoWaitRecup() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doWaitRecup = true;
			doWaitRecupObservable.next(null);
		}
	}
	
	private Observable<Void> doWaitRecupObservable = new Observable<Void>();
	
	public Observable<Void> getDoWaitRecup() {
		return doWaitRecupObservable;
	}
	
	private boolean doWash;
	
	
	protected void raiseDoWash() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doWash = true;
			doWashObservable.next(null);
		}
	}
	
	private Observable<Void> doWashObservable = new Observable<Void>();
	
	public Observable<Void> getDoWash() {
		return doWashObservable;
	}
	
	private boolean doPrepSupp;
	
	
	protected void raiseDoPrepSupp() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doPrepSupp = true;
			doPrepSuppObservable.next(null);
		}
	}
	
	private Observable<Void> doPrepSuppObservable = new Observable<Void>();
	
	public Observable<Void> getDoPrepSupp() {
		return doPrepSuppObservable;
	}
	
	private boolean doTakeIngr;
	
	
	protected void raiseDoTakeIngr() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doTakeIngr = true;
			doTakeIngrObservable.next(null);
		}
	}
	
	private Observable<Void> doTakeIngrObservable = new Observable<Void>();
	
	public Observable<Void> getDoTakeIngr() {
		return doTakeIngrObservable;
	}
	
	private boolean doStartHeated;
	
	
	protected void raiseDoStartHeated() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doStartHeated = true;
			doStartHeatedObservable.next(null);
		}
	}
	
	private Observable<Void> doStartHeatedObservable = new Observable<Void>();
	
	public Observable<Void> getDoStartHeated() {
		return doStartHeatedObservable;
	}
	
	private boolean doPrepPouring;
	
	
	protected void raiseDoPrepPouring() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doPrepPouring = true;
			doPrepPouringObservable.next(null);
		}
	}
	
	private Observable<Void> doPrepPouringObservable = new Observable<Void>();
	
	public Observable<Void> getDoPrepPouring() {
		return doPrepPouringObservable;
	}
	
	private boolean doWaitHeated;
	
	
	protected void raiseDoWaitHeated() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doWaitHeated = true;
			doWaitHeatedObservable.next(null);
		}
	}
	
	private Observable<Void> doWaitHeatedObservable = new Observable<Void>();
	
	public Observable<Void> getDoWaitHeated() {
		return doWaitHeatedObservable;
	}
	
	private boolean doSugar;
	
	
	protected void raiseDoSugar() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doSugar = true;
			doSugarObservable.next(null);
		}
	}
	
	private Observable<Void> doSugarObservable = new Observable<Void>();
	
	public Observable<Void> getDoSugar() {
		return doSugarObservable;
	}
	
	private boolean doProgressBar;
	
	
	protected void raiseDoProgressBar() {
		synchronized(DrinkingFactoryStatemachine.this) {
			doProgressBar = true;
			doProgressBarObservable.next(null);
		}
	}
	
	private Observable<Void> doProgressBarObservable = new Observable<Void>();
	
	public Observable<Void> getDoProgressBar() {
		return doProgressBarObservable;
	}
	
	private long time1;
	
	public synchronized long getTime1() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return time1;
		}
	}
	
	public void setTime1(long value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.time1 = value;
		}
	}
	
	private long time2;
	
	public synchronized long getTime2() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return time2;
		}
	}
	
	public void setTime2(long value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.time2 = value;
		}
	}
	
	private long time3;
	
	public synchronized long getTime3() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return time3;
		}
	}
	
	public void setTime3(long value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.time3 = value;
		}
	}
	
	private long time4;
	
	public synchronized long getTime4() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return time4;
		}
	}
	
	public void setTime4(long value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.time4 = value;
		}
	}
	
	private long time5;
	
	public synchronized long getTime5() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return time5;
		}
	}
	
	public void setTime5(long value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.time5 = value;
		}
	}
	
	private long totalTime;
	
	public synchronized long getTotalTime() {
		synchronized(DrinkingFactoryStatemachine.this) {
			return totalTime;
		}
	}
	
	public void setTotalTime(long value) {
		synchronized(DrinkingFactoryStatemachine.this) {
			this.totalTime = value;
		}
	}
	
	/* Entry action for state 'HotDrink'. */
	private void entryAction_main_region_Interface_Selection_HotDrink() {
		raiseAction();
	}
	
	/* Entry action for state 'CB'. */
	private void entryAction_main_region_Interface_Payment_CB() {
		raiseAction();
	}
	
	/* Entry action for state 'Cash'. */
	private void entryAction_main_region_Interface_Payment_Cash() {
		raiseAction();
	}
	
	/* Entry action for state 'Wait'. */
	private void entryAction_main_region_Interface_Timer_Wait() {
		timerService.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		timerService.setTimer(this, 1, (1 * 1000), false);
	}
	
	/* Entry action for state 'Wait recup'. */
	private void entryAction_main_region_Wait_recup() {
		timerService.setTimer(this, 2, (15 * 1000), false);
	}
	
	/* Entry action for state 'Washing'. */
	private void entryAction_main_region_Washing() {
		timerService.setTimer(this, 3, getTime5(), false);
	}
	
	/* Entry action for state 'Preparation'. */
	private void entryAction_main_region_Preparation() {
		timerService.setTimer(this, 4, 100, true);
	}
	
	/* Entry action for state 'Preparation'. */
	private void entryAction_main_region_Preparation_r1_Preparation() {
		timerService.setTimer(this, 5, getTime2(), false);
	}
	
	/* Entry action for state 'Prep pouring'. */
	private void entryAction_main_region_Preparation_r1_Preparation_r1_Prep_pouring() {
		raiseDoPrepPouring();
	}
	
	/* Entry action for state 'Wait heated'. */
	private void entryAction_main_region_Preparation_r1_Preparation_r2_Wait_heated() {
		raiseDoWaitHeated();
	}
	
	/* Entry action for state 'Prep supp'. */
	private void entryAction_main_region_Preparation_r1_Prep_supp() {
		timerService.setTimer(this, 6, getTime4(), false);
	}
	
	/* Entry action for state 'Pouring'. */
	private void entryAction_main_region_Preparation_r1_Pouring() {
		timerService.setTimer(this, 7, getTime3(), false);
	}
	
	/* Entry action for state 'Sugar'. */
	private void entryAction_main_region_Preparation_r1_Pouring_r1_Sugar() {
		raiseDoSugar();
	}
	
	/* Entry action for state 'Pouring'. */
	private void entryAction_main_region_Preparation_r1_Pouring_r2_Pouring() {
		raiseDoPouring();
	}
	
	/* Entry action for state 'Starting'. */
	private void entryAction_main_region_Preparation_r1_Starting() {
		timerService.setTimer(this, 8, getTime1(), false);
	}
	
	/* Entry action for state 'Take ingr'. */
	private void entryAction_main_region_Preparation_r1_Starting_r1_Take_ingr() {
		raiseDoTakeIngr();
	}
	
	/* Entry action for state 'Start heated'. */
	private void entryAction_main_region_Preparation_r1_Starting_r2_Start_heated() {
		raiseDoStartHeated();
	}
	
	/* Exit action for state 'Wait'. */
	private void exitAction_main_region_Interface_Timer_Wait() {
		timerService.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		timerService.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Wait recup'. */
	private void exitAction_main_region_Wait_recup() {
		timerService.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Washing'. */
	private void exitAction_main_region_Washing() {
		timerService.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Preparation'. */
	private void exitAction_main_region_Preparation() {
		timerService.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Preparation'. */
	private void exitAction_main_region_Preparation_r1_Preparation() {
		timerService.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Prep supp'. */
	private void exitAction_main_region_Preparation_r1_Prep_supp() {
		timerService.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Pouring'. */
	private void exitAction_main_region_Preparation_r1_Pouring() {
		timerService.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'Starting'. */
	private void exitAction_main_region_Preparation_r1_Starting() {
		timerService.unsetTimer(this, 8);
	}
	
	/* 'default' enter sequence for state Interface */
	private void enterSequence_main_region_Interface_default() {
		enterSequence_main_region_Interface_Selection_default();
		enterSequence_main_region_Interface_Payment_default();
		enterSequence_main_region_Interface_Timer_default();
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Interface_Selection_Init_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_INTERFACE_SELECTION_INIT;
	}
	
	/* 'default' enter sequence for state HotDrink */
	private void enterSequence_main_region_Interface_Selection_HotDrink_default() {
		entryAction_main_region_Interface_Selection_HotDrink();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_INTERFACE_SELECTION_HOTDRINK;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Interface_Payment_Init_default() {
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_INTERFACE_PAYMENT_INIT;
	}
	
	/* 'default' enter sequence for state CB */
	private void enterSequence_main_region_Interface_Payment_CB_default() {
		entryAction_main_region_Interface_Payment_CB();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_INTERFACE_PAYMENT_CB;
	}
	
	/* 'default' enter sequence for state Cash */
	private void enterSequence_main_region_Interface_Payment_Cash_default() {
		entryAction_main_region_Interface_Payment_Cash();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_INTERFACE_PAYMENT_CASH;
	}
	
	/* 'default' enter sequence for state Wait */
	private void enterSequence_main_region_Interface_Timer_Wait_default() {
		entryAction_main_region_Interface_Timer_Wait();
		nextStateIndex = 2;
		stateVector[2] = State.MAIN_REGION_INTERFACE_TIMER_WAIT;
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		entryAction_main_region_Init();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_INIT;
	}
	
	/* 'default' enter sequence for state Wait recup */
	private void enterSequence_main_region_Wait_recup_default() {
		entryAction_main_region_Wait_recup();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_WAIT_RECUP;
	}
	
	/* 'default' enter sequence for state Washing */
	private void enterSequence_main_region_Washing_default() {
		entryAction_main_region_Washing();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_WASHING;
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_main_region_Preparation_default() {
		entryAction_main_region_Preparation();
		enterSequence_main_region_Preparation_r1_default();
	}
	
	/* 'default' enter sequence for state Preparation */
	private void enterSequence_main_region_Preparation_r1_Preparation_default() {
		entryAction_main_region_Preparation_r1_Preparation();
		enterSequence_main_region_Preparation_r1_Preparation_r1_default();
		enterSequence_main_region_Preparation_r1_Preparation_r2_default();
	}
	
	/* 'default' enter sequence for state Prep pouring */
	private void enterSequence_main_region_Preparation_r1_Preparation_r1_Prep_pouring_default() {
		entryAction_main_region_Preparation_r1_Preparation_r1_Prep_pouring();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING;
	}
	
	/* 'default' enter sequence for state Wait heated */
	private void enterSequence_main_region_Preparation_r1_Preparation_r2_Wait_heated_default() {
		entryAction_main_region_Preparation_r1_Preparation_r2_Wait_heated();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED;
	}
	
	/* 'default' enter sequence for state Prep supp */
	private void enterSequence_main_region_Preparation_r1_Prep_supp_default() {
		entryAction_main_region_Preparation_r1_Prep_supp();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_PREPARATION_R1_PREP_SUPP;
	}
	
	/* 'default' enter sequence for state Pouring */
	private void enterSequence_main_region_Preparation_r1_Pouring_default() {
		entryAction_main_region_Preparation_r1_Pouring();
		enterSequence_main_region_Preparation_r1_Pouring_r1_default();
		enterSequence_main_region_Preparation_r1_Pouring_r2_default();
	}
	
	/* 'default' enter sequence for state Sugar */
	private void enterSequence_main_region_Preparation_r1_Pouring_r1_Sugar_default() {
		entryAction_main_region_Preparation_r1_Pouring_r1_Sugar();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR;
	}
	
	/* 'default' enter sequence for state Pouring */
	private void enterSequence_main_region_Preparation_r1_Pouring_r2_Pouring_default() {
		entryAction_main_region_Preparation_r1_Pouring_r2_Pouring();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_PREPARATION_R1_POURING_R2_POURING;
	}
	
	/* 'default' enter sequence for state Starting */
	private void enterSequence_main_region_Preparation_r1_Starting_default() {
		entryAction_main_region_Preparation_r1_Starting();
		enterSequence_main_region_Preparation_r1_Starting_r1_default();
		enterSequence_main_region_Preparation_r1_Starting_r2_default();
	}
	
	/* 'default' enter sequence for state Take ingr */
	private void enterSequence_main_region_Preparation_r1_Starting_r1_Take_ingr_default() {
		entryAction_main_region_Preparation_r1_Starting_r1_Take_ingr();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR;
	}
	
	/* 'default' enter sequence for state Start heated */
	private void enterSequence_main_region_Preparation_r1_Starting_r2_Start_heated_default() {
		entryAction_main_region_Preparation_r1_Starting_r2_Start_heated();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Selection */
	private void enterSequence_main_region_Interface_Selection_default() {
		react_main_region_Interface_Selection__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_main_region_Interface_Payment_default() {
		react_main_region_Interface_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region Timer */
	private void enterSequence_main_region_Interface_Timer_default() {
		react_main_region_Interface_Timer__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Preparation_r1_default() {
		react_main_region_Preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Preparation_r1_Preparation_r1_default() {
		react_main_region_Preparation_r1_Preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Preparation_r1_Preparation_r2_default() {
		react_main_region_Preparation_r1_Preparation_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Preparation_r1_Pouring_r1_default() {
		react_main_region_Preparation_r1_Pouring_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Preparation_r1_Pouring_r2_default() {
		react_main_region_Preparation_r1_Pouring_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Preparation_r1_Starting_r1_default() {
		react_main_region_Preparation_r1_Starting_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Preparation_r1_Starting_r2_default() {
		react_main_region_Preparation_r1_Starting_r2__entry_Default();
	}
	
	/* Default exit sequence for state Interface */
	private void exitSequence_main_region_Interface() {
		exitSequence_main_region_Interface_Selection();
		exitSequence_main_region_Interface_Payment();
		exitSequence_main_region_Interface_Timer();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Interface_Selection_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state HotDrink */
	private void exitSequence_main_region_Interface_Selection_HotDrink() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Interface_Payment_Init() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state CB */
	private void exitSequence_main_region_Interface_Payment_CB() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Cash */
	private void exitSequence_main_region_Interface_Payment_Cash() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Wait */
	private void exitSequence_main_region_Interface_Timer_Wait() {
		nextStateIndex = 2;
		stateVector[2] = State.$NULLSTATE$;
		
		exitAction_main_region_Interface_Timer_Wait();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state Wait recup */
	private void exitSequence_main_region_Wait_recup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Wait_recup();
	}
	
	/* Default exit sequence for state Washing */
	private void exitSequence_main_region_Washing() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Washing();
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_main_region_Preparation() {
		exitSequence_main_region_Preparation_r1();
		exitAction_main_region_Preparation();
	}
	
	/* Default exit sequence for state Preparation */
	private void exitSequence_main_region_Preparation_r1_Preparation() {
		exitSequence_main_region_Preparation_r1_Preparation_r1();
		exitSequence_main_region_Preparation_r1_Preparation_r2();
		exitAction_main_region_Preparation_r1_Preparation();
	}
	
	/* Default exit sequence for state Prep pouring */
	private void exitSequence_main_region_Preparation_r1_Preparation_r1_Prep_pouring() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Wait heated */
	private void exitSequence_main_region_Preparation_r1_Preparation_r2_Wait_heated() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Prep supp */
	private void exitSequence_main_region_Preparation_r1_Prep_supp() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_region_Preparation_r1_Prep_supp();
	}
	
	/* Default exit sequence for state Pouring */
	private void exitSequence_main_region_Preparation_r1_Pouring() {
		exitSequence_main_region_Preparation_r1_Pouring_r1();
		exitSequence_main_region_Preparation_r1_Pouring_r2();
		exitAction_main_region_Preparation_r1_Pouring();
	}
	
	/* Default exit sequence for state Sugar */
	private void exitSequence_main_region_Preparation_r1_Pouring_r1_Sugar() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Pouring */
	private void exitSequence_main_region_Preparation_r1_Pouring_r2_Pouring() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Starting */
	private void exitSequence_main_region_Preparation_r1_Starting() {
		exitSequence_main_region_Preparation_r1_Starting_r1();
		exitSequence_main_region_Preparation_r1_Starting_r2();
		exitAction_main_region_Preparation_r1_Starting();
	}
	
	/* Default exit sequence for state Take ingr */
	private void exitSequence_main_region_Preparation_r1_Starting_r1_Take_ingr() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state Start heated */
	private void exitSequence_main_region_Preparation_r1_Starting_r2_Start_heated() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_INTERFACE_SELECTION_INIT:
			exitSequence_main_region_Interface_Selection_Init();
			break;
		case MAIN_REGION_INTERFACE_SELECTION_HOTDRINK:
			exitSequence_main_region_Interface_Selection_HotDrink();
			break;
		case MAIN_REGION_INIT:
			exitSequence_main_region_Init();
			break;
		case MAIN_REGION_WAIT_RECUP:
			exitSequence_main_region_Wait_recup();
			break;
		case MAIN_REGION_WASHING:
			exitSequence_main_region_Washing();
			break;
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING:
			exitSequence_main_region_Preparation_r1_Preparation_r1_Prep_pouring();
			break;
		case MAIN_REGION_PREPARATION_R1_PREP_SUPP:
			exitSequence_main_region_Preparation_r1_Prep_supp();
			exitAction_main_region_Preparation();
			break;
		case MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR:
			exitSequence_main_region_Preparation_r1_Pouring_r1_Sugar();
			break;
		case MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR:
			exitSequence_main_region_Preparation_r1_Starting_r1_Take_ingr();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_INTERFACE_PAYMENT_INIT:
			exitSequence_main_region_Interface_Payment_Init();
			break;
		case MAIN_REGION_INTERFACE_PAYMENT_CB:
			exitSequence_main_region_Interface_Payment_CB();
			break;
		case MAIN_REGION_INTERFACE_PAYMENT_CASH:
			exitSequence_main_region_Interface_Payment_Cash();
			break;
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED:
			exitSequence_main_region_Preparation_r1_Preparation_r2_Wait_heated();
			exitAction_main_region_Preparation_r1_Preparation();
			exitAction_main_region_Preparation();
			break;
		case MAIN_REGION_PREPARATION_R1_POURING_R2_POURING:
			exitSequence_main_region_Preparation_r1_Pouring_r2_Pouring();
			exitAction_main_region_Preparation_r1_Pouring();
			exitAction_main_region_Preparation();
			break;
		case MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED:
			exitSequence_main_region_Preparation_r1_Starting_r2_Start_heated();
			exitAction_main_region_Preparation_r1_Starting();
			exitAction_main_region_Preparation();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case MAIN_REGION_INTERFACE_TIMER_WAIT:
			exitSequence_main_region_Interface_Timer_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Selection */
	private void exitSequence_main_region_Interface_Selection() {
		switch (stateVector[0]) {
		case MAIN_REGION_INTERFACE_SELECTION_INIT:
			exitSequence_main_region_Interface_Selection_Init();
			break;
		case MAIN_REGION_INTERFACE_SELECTION_HOTDRINK:
			exitSequence_main_region_Interface_Selection_HotDrink();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_main_region_Interface_Payment() {
		switch (stateVector[1]) {
		case MAIN_REGION_INTERFACE_PAYMENT_INIT:
			exitSequence_main_region_Interface_Payment_Init();
			break;
		case MAIN_REGION_INTERFACE_PAYMENT_CB:
			exitSequence_main_region_Interface_Payment_CB();
			break;
		case MAIN_REGION_INTERFACE_PAYMENT_CASH:
			exitSequence_main_region_Interface_Payment_Cash();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Timer */
	private void exitSequence_main_region_Interface_Timer() {
		switch (stateVector[2]) {
		case MAIN_REGION_INTERFACE_TIMER_WAIT:
			exitSequence_main_region_Interface_Timer_Wait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Preparation_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING:
			exitSequence_main_region_Preparation_r1_Preparation_r1_Prep_pouring();
			break;
		case MAIN_REGION_PREPARATION_R1_PREP_SUPP:
			exitSequence_main_region_Preparation_r1_Prep_supp();
			break;
		case MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR:
			exitSequence_main_region_Preparation_r1_Pouring_r1_Sugar();
			break;
		case MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR:
			exitSequence_main_region_Preparation_r1_Starting_r1_Take_ingr();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED:
			exitSequence_main_region_Preparation_r1_Preparation_r2_Wait_heated();
			exitAction_main_region_Preparation_r1_Preparation();
			break;
		case MAIN_REGION_PREPARATION_R1_POURING_R2_POURING:
			exitSequence_main_region_Preparation_r1_Pouring_r2_Pouring();
			exitAction_main_region_Preparation_r1_Pouring();
			break;
		case MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED:
			exitSequence_main_region_Preparation_r1_Starting_r2_Start_heated();
			exitAction_main_region_Preparation_r1_Starting();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Preparation_r1_Preparation_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R1_PREP_POURING:
			exitSequence_main_region_Preparation_r1_Preparation_r1_Prep_pouring();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Preparation_r1_Preparation_r2() {
		switch (stateVector[1]) {
		case MAIN_REGION_PREPARATION_R1_PREPARATION_R2_WAIT_HEATED:
			exitSequence_main_region_Preparation_r1_Preparation_r2_Wait_heated();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Preparation_r1_Pouring_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARATION_R1_POURING_R1_SUGAR:
			exitSequence_main_region_Preparation_r1_Pouring_r1_Sugar();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Preparation_r1_Pouring_r2() {
		switch (stateVector[1]) {
		case MAIN_REGION_PREPARATION_R1_POURING_R2_POURING:
			exitSequence_main_region_Preparation_r1_Pouring_r2_Pouring();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Preparation_r1_Starting_r1() {
		switch (stateVector[0]) {
		case MAIN_REGION_PREPARATION_R1_STARTING_R1_TAKE_INGR:
			exitSequence_main_region_Preparation_r1_Starting_r1_Take_ingr();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Preparation_r1_Starting_r2() {
		switch (stateVector[1]) {
		case MAIN_REGION_PREPARATION_R1_STARTING_R2_START_HEATED:
			exitSequence_main_region_Preparation_r1_Starting_r2_Start_heated();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Interface_Selection__entry_Default() {
		enterSequence_main_region_Interface_Selection_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Interface_Payment__entry_Default() {
		enterSequence_main_region_Interface_Payment_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Interface_Timer__entry_Default() {
		enterSequence_main_region_Interface_Timer_Wait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1_Preparation_r1__entry_Default() {
		enterSequence_main_region_Preparation_r1_Preparation_r1_Prep_pouring_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1_Preparation_r2__entry_Default() {
		enterSequence_main_region_Preparation_r1_Preparation_r2_Wait_heated_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1_Pouring_r1__entry_Default() {
		enterSequence_main_region_Preparation_r1_Pouring_r1_Sugar_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1_Pouring_r2__entry_Default() {
		enterSequence_main_region_Preparation_r1_Pouring_r2_Pouring_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1_Starting_r1__entry_Default() {
		enterSequence_main_region_Preparation_r1_Starting_r1_Take_ingr_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1_Starting_r2__entry_Default() {
		enterSequence_main_region_Preparation_r1_Starting_r2_Start_heated_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Preparation_r1__entry_Default() {
		enterSequence_main_region_Preparation_r1_Starting_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Interface_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (cancel) {
				exitSequence_main_region_Interface();
				raiseDoCancel();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				if (validate) {
					exitSequence_main_region_Interface();
					raiseDoStartMachine();
					
					enterSequence_main_region_Preparation_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Selection_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (selectHotDrink) {
				exitSequence_main_region_Interface_Selection_Init();
				raiseDoHotDrink();
				
				enterSequence_main_region_Interface_Selection_HotDrink_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Selection_HotDrink_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (selectParam) {
				exitSequence_main_region_Interface_Selection_HotDrink();
				enterSequence_main_region_Interface_Selection_HotDrink_default();
			} else {
				if (selectHotDrink) {
					exitSequence_main_region_Interface_Selection_HotDrink();
					raiseDoHotDrink();
					
					enterSequence_main_region_Interface_Selection_HotDrink_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Payment_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (payCB) {
				exitSequence_main_region_Interface_Payment_Init();
				raiseDoCB();
				
				enterSequence_main_region_Interface_Payment_CB_default();
			} else {
				if (addCash) {
					exitSequence_main_region_Interface_Payment_Init();
					raiseDoAddCash();
					
					enterSequence_main_region_Interface_Payment_Cash_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Payment_CB_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Payment_Cash_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (addCash) {
				exitSequence_main_region_Interface_Payment_Cash();
				raiseDoAddCash();
				
				enterSequence_main_region_Interface_Payment_Cash_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Interface_Timer_Wait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Interface();
				raiseDoCancel();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				if (action) {
					exitSequence_main_region_Interface_Timer_Wait();
					enterSequence_main_region_Interface_Timer_Wait_default();
					main_region_Interface_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Interface_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_Init();
				raiseDoWelcome();
				
				enterSequence_main_region_Interface_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Wait_recup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_Wait_recup();
				raiseDoWash();
				
				enterSequence_main_region_Washing_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Washing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_Washing();
				raiseDoCancel();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			if (timeEvents[4]) {
				raiseDoProgressBar();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_main_region_Preparation_r1_Preparation();
				enterSequence_main_region_Preparation_r1_Pouring_default();
				main_region_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Preparation_r1_Prep_pouring_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Preparation_r2_Wait_heated_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_r1_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Prep_supp_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_main_region_Preparation();
				raiseDoWaitRecup();
				
				enterSequence_main_region_Wait_recup_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Pouring_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_main_region_Preparation_r1_Pouring();
				raiseDoPrepSupp();
				
				enterSequence_main_region_Preparation_r1_Prep_supp_default();
				main_region_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Pouring_r1_Sugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Pouring_r2_Pouring_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_r1_Pouring_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Starting_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_main_region_Preparation_r1_Starting();
				enterSequence_main_region_Preparation_r1_Preparation_default();
				main_region_Preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Starting_r1_Take_ingr_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_Preparation_r1_Starting_r2_Start_heated_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Preparation_r1_Starting_react(try_transition);
		}
		return did_transition;
	}
	
}
